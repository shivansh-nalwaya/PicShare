{"version":3,"sources":["routes/Home.js","App.js","serviceWorker.js","index.js"],"names":["Meta","Container","styled","div","_templateObject","Picture","_templateObject2","Nav","_templateObject3","Logo","_templateObject4","Thumb","props","url","concat","src","react_default","a","createElement","style","backgroundImage","backgroundSize","backgroundRepeat","backgroundPosition","borderBottom","width","height","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sortPics","data","sort","x","y","Date","parse","timestamp","showModal","setState","modalVisible","handleOk","pictureUrl","state","file","result","new_data","Image","title","localStorage","setItem","JSON","stringify","fileList","handleCancel","e","search","getItem","_this2","row","type","justify","align","col","span","input","placeholder","onChange","text","target","value","searchData","filter","d","toLowerCase","startsWith","prefix","icon","color","es_button","size","onClick","modal","visible","onCancel","footer","key","upload","error","status","action","console","log","Promise","resolve","reject","reader","FileReader","onload","onerror","readAsDataURL","paddingTop","map","pic","index","card","cover","Home_Thumb","shape","pics","splice","description","timeAgo","Component","About","Users","AppRouter","BrowserRouter","Route","path","exact","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3af64d11.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport styled from \"styled-components\";\nimport { Card, Icon, Button, Row, Modal, Input, Col, Upload } from \"antd\";\nimport timeAgo from \"node-time-ago\";\n\nconst { Meta } = Card;\n\nconst Container = styled.div`\n  padding-top: 2em;\n  padding-left: 1em;\n`;\n\nconst Picture = styled.div`\n  width: 30em;\n  display: inline-block;\n  padding: 1em;\n`;\n\nconst Nav = styled.div`\n  padding-top: 1em;\n  padding-bottom: 1em;\n  border-bottom: 1px solid #eeeeee;\n`;\n\nconst Logo = styled.div`\n  font-size: 2em;\n`;\n\nconst Thumb = props => {\n  let url = `url(${props.src})`;\n  return (\n    <div\n      style={{\n        backgroundImage: url,\n        backgroundSize: \"100%\",\n        backgroundRepeat: \"no-repeat\",\n        backgroundPosition: \"center center\",\n        borderBottom: \"1px solid #eeeeee\",\n        width: \"27.84em\",\n        height: \"18em\"\n      }}\n    />\n  );\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      url: \"\",\n      modalVisible: false,\n      title: \"\",\n      search: \"\",\n      file: \"\",\n      fileList: []\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: this.sortPics(JSON.parse(localStorage.getItem(\"img_data\")) || [])\n    });\n  }\n\n  sortPics = data => {\n    let pics = data.sort(function(x, y) {\n      return Date.parse(y.timestamp) - Date.parse(x.timestamp);\n    });\n    return pics;\n  };\n\n  showModal = () => {\n    this.setState({\n      modalVisible: true\n    });\n  };\n\n  handleOk = () => {\n    let pictureUrl = this.state.url;\n    if (!pictureUrl) pictureUrl = this.state.file.result;\n    let new_data = this.state.data.concat({\n      Image: pictureUrl,\n      timestamp: new Date(),\n      title: this.state.title\n    });\n    localStorage.setItem(\"img_data\", JSON.stringify(new_data));\n    this.setState({\n      data: this.sortPics(new_data),\n      modalVisible: false,\n      url: \"\",\n      title: \"\",\n      fileList: []\n    });\n  };\n\n  handleCancel = e => {\n    this.setState({\n      modalVisible: false\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav>\n          <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\n            <Col span={2}>\n              <Logo>PicShare</Logo>\n            </Col>\n            <Col span={8}>\n              <div>\n                <Input\n                  placeholder=\"Search\"\n                  onChange={e => {\n                    let text = e.target.value;\n                    let searchData = JSON.parse(\n                      localStorage.getItem(\"img_data\")\n                    ).filter(d => {\n                      if (text === \"\") return true;\n                      return d.title\n                        .toLowerCase()\n                        .startsWith(text.toLowerCase());\n                    });\n                    this.setState({ data: this.sortPics(searchData) });\n                  }}\n                  prefix={\n                    <Icon type=\"search\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n                  }\n                />\n              </div>\n            </Col>\n            <Col span={8}>\n              <Row>\n                <Col span={4}>\n                  <Button size=\"large\" icon=\"plus\" onClick={this.showModal}>\n                    Upload Image\n                  </Button>\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n        </Nav>\n        <Container>\n          <Modal\n            title=\"Upload Image\"\n            visible={this.state.modalVisible}\n            onCancel={this.handleCancel}\n            footer={[\n              <Button key=\"cancel\" onClick={this.handleCancel}>\n                Cancel\n              </Button>,\n              <Button key=\"upload\" type=\"primary\" onClick={this.handleOk}>\n                Upload\n              </Button>\n            ]}\n          >\n            <Row type=\"flex\" justify=\"center\" align=\"middle\">\n              <Col span={8}>\n                <Upload\n                  fileList={this.state.fileList}\n                  onChange={e => {\n                    e.file.error = null;\n                    e.file.status = \"done\";\n                    this.setState({ fileList: [e.file] });\n                  }}\n                  action={e => {\n                    console.log(e);\n                    return new Promise((resolve, reject) => {\n                      const reader = new FileReader();\n                      reader.onload = () => resolve(\"reader.result\");\n                      reader.onerror = error => reject(error);\n                      reader.readAsDataURL(e);\n                      this.setState({ file: reader, url: \"\" });\n                    });\n                  }}\n                >\n                  <Button>\n                    <Icon type=\"upload\" /> Click to Upload\n                  </Button>\n                </Upload>\n              </Col>\n              <Col span={2}>OR</Col>\n              <Col span={12}>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter URL of the image\"\n                  value={this.state.url}\n                  onChange={e => {\n                    this.setState({ url: e.target.value });\n                  }}\n                />\n              </Col>\n            </Row>\n            <Row\n              type=\"flex\"\n              justify=\"center\"\n              align=\"middle\"\n              style={{ paddingTop: \"1em\" }}\n            >\n              <Col span={22}>\n                <Input\n                  type=\"text\"\n                  placeholder=\"Enter Title\"\n                  value={this.state.title}\n                  onChange={e => {\n                    this.setState({ title: e.target.value });\n                  }}\n                />\n              </Col>\n            </Row>\n          </Modal>\n          {this.state.data.map((pic, index) => (\n            <Picture key={index}>\n              <Card cover={<Thumb src={pic.Image} />}>\n                <Meta\n                  title={\n                    <Row type=\"flex\" justify=\"space-between\">\n                      {pic.title}\n                      <Button\n                        shape=\"circle\"\n                        icon=\"delete\"\n                        type=\"danger\"\n                        onClick={() => {\n                          let pics = this.state.data;\n                          pics.splice(index, 1);\n                          localStorage.setItem(\n                            \"img_data\",\n                            JSON.stringify(pics)\n                          );\n                          this.setState({\n                            data: this.sortPics(pics)\n                          });\n                        }}\n                      />\n                    </Row>\n                  }\n                  description={timeAgo(pic.timestamp)}\n                />\n              </Card>\n            </Picture>\n          ))}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\n// import Navbar from \"./components/Navbar\";\n\nconst About = () => <h2>About</h2>;\nconst Users = () => <h2>Users</h2>;\n\nconst AppRouter = () => (\n  <Router>\n    <div>\n      <Route path=\"/\" exact component={Home} />\n      <Route path=\"/about/\" component={About} />\n      <Route path=\"/users/\" component={Users} />\n    </div>\n  </Router>\n);\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}