{"version":3,"sources":["styles/Home.js","styles/Navbar.js","components/Navbar.js","models/PictureModel.js","components/UploadModal.js","styles/PictureCard.js","components/PictureCard.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","Logo","Navbar_templateObject","Nav","_templateObject2","Navbar","react_default","a","createElement","row","type","justify","align","col","span","input","placeholder","onChange","this","props","onInputChange","prefix","icon","style","color","es_button","size","onClick","showModal","Component","PICTURE_INSTANCE","PictureModel","_this","Object","classCallCheck","addPic","image","new_data","data","concat","Image","timestamp","Date","title","localStorage","setItem","JSON","stringify","sortPics","deletePic","index","pics","splice","slice","sort","x","y","parse","extendObservable","getItem","UploadModal","possibleConstructorReturn","getPrototypeOf","call","handleUpload","url","file","result","fileList","handleCancel","actionFileUpload","e","Promise","resolve","reject","reader","FileReader","onload","onerror","error","readAsDataURL","assertThisInitialized","_this2","modal","visible","onCancel","footer","key","upload","status","action","value","target","paddingTop","observer","Picture","PictureCard_templateObject","Thumbnail","PictureCard_templateObject2","Meta","PictureCard","card","cover","pic","shape","description","timeAgo","App","modalVisible","onSearchInputChange","search","Navbar_Navbar","components_UploadModal","handleOk","map","PictureCard_PictureCard","AppRouter","Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.578fb2b5.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding-top: 2em;\n  padding-left: 1em;\n`;\n","import styled from \"styled-components\";\n\nexport const Logo = styled.div`\n  font-size: 2em;\n`;\n\nexport const Nav = styled.div`\n  padding-top: 1em;\n  padding-bottom: 1em;\n  border-bottom: 1px solid #eeeeee;\n`;\n","import React, { Component } from \"react\";\nimport { Icon, Button, Row, Input, Col } from \"antd\";\nimport { Logo, Nav } from \"../styles/Navbar\";\n\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <Nav>\n        <Row type=\"flex\" justify=\"space-around\" align=\"middle\">\n          <Col span={2}>\n            <Logo>PicShare</Logo>\n          </Col>\n          <Col span={8}>\n            <Input\n              placeholder=\"Search\"\n              onChange={this.props.onInputChange}\n              prefix={\n                <Icon type=\"search\" style={{ color: \"rgba(0,0,0,.25)\" }} />\n              }\n            />\n          </Col>\n          <Col span={8}>\n            <Row>\n              <Col span={4}>\n                <Button size=\"large\" icon=\"plus\" onClick={this.props.showModal}>\n                  Upload Image\n                </Button>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Nav>\n    );\n  }\n}\n","import { extendObservable } from \"mobx\";\n\nclass PictureModel {\n  constructor() {\n    extendObservable(this, {\n      data: this.sortPics(JSON.parse(localStorage.getItem(\"img_data\") || []))\n    });\n  }\n\n  addPic = image => {\n    let new_data = this.data.concat({\n      Image: image.Image,\n      timestamp: new Date(),\n      title: image.title\n    });\n    localStorage.setItem(\"img_data\", JSON.stringify(new_data));\n    this.data = this.sortPics(new_data);\n  };\n\n  deletePic = index => {\n    let pics = this.data;\n    pics.splice(index, 1);\n    localStorage.setItem(\"img_data\", JSON.stringify(pics));\n    this.data = this.sortPics(pics);\n  };\n\n  sortPics = data => {\n    return data.slice().sort(function(x, y) {\n      return Date.parse(y.timestamp) - Date.parse(x.timestamp);\n    });\n  };\n}\n\nconst PICTURE_INSTANCE = new PictureModel();\n\nexport default PICTURE_INSTANCE;\n","import React, { Component } from \"react\";\nimport { Icon, Button, Row, Modal, Input, Col, Upload } from \"antd\";\nimport { extendObservable } from \"mobx\";\nimport { observer } from \"mobx-react\";\nimport PictureModel from \"../models/PictureModel\";\n\nclass UploadModal extends Component {\n  constructor(props) {\n    super(props);\n    extendObservable(this, {\n      url: \"\",\n      title: \"\",\n      file: \"\",\n      fileList: []\n    });\n  }\n\n  handleUpload = () => {\n    PictureModel.addPic({\n      Image: this.url || this.file.result,\n      title: this.title\n    });\n    this.fileList = [];\n    this.url = \"\";\n    this.title = \"\";\n    this.props.handleCancel();\n  };\n\n  actionFileUpload = e => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve();\n      reader.onerror = error => reject(error);\n      reader.readAsDataURL(e);\n      this.file = reader;\n      this.url = \"\";\n    });\n  };\n\n  render() {\n    return (\n      <Modal\n        title=\"Upload Image\"\n        visible={this.props.visible}\n        onCancel={this.props.handleCancel}\n        footer={[\n          <Button key=\"cancel\" onClick={this.props.handleCancel}>\n            Cancel\n          </Button>,\n          <Button key=\"upload\" type=\"primary\" onClick={this.handleUpload}>\n            Upload\n          </Button>\n        ]}\n      >\n        <Row type=\"flex\" justify=\"center\" align=\"middle\">\n          <Col span={8}>\n            <Upload\n              fileList={this.fileList}\n              onChange={e => {\n                e.file.status = \"done\";\n                e.file.error = null;\n                this.fileList = [e.file];\n              }}\n              action={this.actionFileUpload}\n            >\n              <Button>\n                <Icon type=\"upload\" /> Click to Upload\n              </Button>\n            </Upload>\n          </Col>\n          <Col span={2}>OR</Col>\n          <Col span={12}>\n            <Input\n              type=\"text\"\n              placeholder=\"Enter URL of the image\"\n              value={this.url}\n              onChange={e => {\n                this.url = e.target.value;\n              }}\n            />\n          </Col>\n        </Row>\n        <Row\n          type=\"flex\"\n          justify=\"center\"\n          align=\"middle\"\n          style={{ paddingTop: \"1em\" }}\n        >\n          <Col span={22}>\n            <Input\n              type=\"text\"\n              placeholder=\"Enter Title\"\n              value={this.title}\n              onChange={e => {\n                this.title = e.target.value;\n              }}\n            />\n          </Col>\n        </Row>\n      </Modal>\n    );\n  }\n}\n\nexport default observer(UploadModal);\n","import styled from \"styled-components\";\n\nexport const Picture = styled.div`\n  width: 30em;\n  display: inline-block;\n  padding: 1em;\n`;\n\nexport const Thumbnail = styled.div`\n  background-image: ${props => props.url || \"\"};\n  background-size: 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n  border-bottom: 1px solid #eeeeee;\n  width: 27.84em;\n  height: 18em;\n`;\n","import React, { Component } from \"react\";\nimport { Card, Button, Row } from \"antd\";\nimport timeAgo from \"node-time-ago\";\nimport { Picture, Thumbnail } from \"../styles/PictureCard\";\nconst { Meta } = Card;\n\nexport default class PictureCard extends Component {\n  render() {\n    return (\n      <Picture>\n        <Card cover={<Thumbnail url={`url(${this.props.pic.Image})`} />}>\n          <Meta\n            title={\n              <Row type=\"flex\" justify=\"space-between\">\n                {this.props.pic.title}\n                <Button\n                  shape=\"circle\"\n                  icon=\"delete\"\n                  type=\"danger\"\n                  onClick={this.props.onClick}\n                />\n              </Row>\n            }\n            description={timeAgo(this.props.pic.timestamp)}\n          />\n        </Card>\n      </Picture>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Container } from \"../styles/Home\";\nimport Navbar from \"../components/Navbar\";\nimport UploadModal from \"../components/UploadModal\";\nimport PictureCard from \"../components/PictureCard\";\nimport PictureModel from \"../models/PictureModel\";\nimport { extendObservable } from \"mobx\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    extendObservable(this, {\n      modalVisible: false,\n      search: \"\"\n    });\n  }\n\n  showModal = () => {\n    this.modalVisible = true;\n  };\n\n  handleCancel = e => {\n    this.modalVisible = false;\n  };\n\n  onSearchInputChange = e => {\n    // let text = e.target.value;\n    // let searchData = JSON.parse(localStorage.getItem(\"img_data\")).filter(d => {\n    //   if (text === \"\") return true;\n    //   return d.title.toLowerCase().startsWith(text.toLowerCase());\n    // });\n    // this.setState({ data: this.sortPics(searchData) });\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          onInputChange={this.onSearchInputChange}\n          showModal={this.showModal}\n        />\n        <Container>\n          <UploadModal\n            visible={this.modalVisible}\n            handleCancel={this.handleCancel}\n            handleOk={this.handleOk}\n          />\n          {PictureModel.data.map((pic, index) => (\n            <PictureCard\n              key={index}\n              pic={pic}\n              onClick={() => {\n                PictureModel.deletePic(index);\n              }}\n            />\n          ))}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default observer(App);\n","import React from \"react\";\nimport Home from \"./pages/Home\";\n\nconst AppRouter = () => <Home />;\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}